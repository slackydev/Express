type TAnimal = class 
  var name: string
  const myconst: Int32 = 1;
  var hello: Int32 = 100;
  
  func Create(aName: string)
    self.name := aName
    self.myconst := 999;
  end
  
  func Speak()
    print 'Undefined'
  end
  
  func Foo()
    print 'i am parent'
  end;
  
  func Foo(x,y: Int32): Int32
    return x*y;
  end;
  
  func Free()
    print 'freeing'
  end
end

type TCat = class(TAnimal)
  func Speak() // No 'override' keyword is needed.
    print self.name + ' says meow'
  end
  
  func Foo()
    inherited()
  end;
  
  func Free()
    print 'child freeing'
  end
end

// Technically - we can make this a VMT override cuz it exists.
// but late OVERLOADS and NEW METHODS can **NOT** be added to the VMT late.
func TCat.Speak(); 
  print 'NO!'
end;

var myCat: TAnimal = new TCat('Missy')
myCat.Speak()
myCat.Foo()
print '----------------'
print myCat.hello
print myCat.myConst
print myCat.name
print '----------------'