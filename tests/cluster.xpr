type TPoint = record x,y: Int32 end
type TPointArray = array of TPoint
type T2DPointArray = array of TPointArray

func SplitPoints(Points: TPointArray DistX, DistY: Int32): T2DPointArray
  var Clusters: T2DPointArray
  var Current: TPointArray
  var ClustSize: Int32
  var p1, p2: TPoint

  if(Points.High() = -1)
    return nil

  if(Points.High() = 0) then
    Clusters.SetLen(1)
    Clusters[0] := Points
  end

  var xsq := DistX * DistX
  var ysq := DistY * DistY
  var xxyy := xsq * ysq

  var LastIndex := Points.High()
  var ProcCount := 0

  while (LastIndex - ProcCount >= 0) do
    Current := nil
    Current.SetLen(1)
    Current[0] := Points[0]
    Points[0] := Points[LastIndex - ProcCount]
    ProcCount += 1

    ClustSize := 1
    var i := 0

    while(i < ClustSize)do
      var j := 0
      while(j <= LastIndex - ProcCount) do
        p1 := Current[i]
        p2 := Points[j]
        
        var dx := p1.X - p2.X
        var dy := p1.Y - p2.Y
        if ((dx * dx * ysq) + (dy * dy * xsq) <= xxyy) then
          Current.SetLen(ClustSize + 1)
          Current[ClustSize] := p2
          Points[j] := Points[LastIndex - ProcCount]
          
          ProcCount += 1
          ClustSize += 1
          j -= 1
        end
        j += 1
      end
      i += 1
    end

    Clusters.SetLen(Clusters.Len()+1)
    Clusters[Clusters.High()] := Current
  end

  return clusters
end

func GeneratePoints(N: Int): TPointArray
  var Result: TPointArray
  Result.SetLen(N)
  for(var i:=0; i < n; i+=1) do
    Result[i].X := RandInt(0,1000)
    Result[i].Y := RandInt(0,1000)
  end
  return Result
end

func Benchmark()
  var P := GeneratePoints(10000)
  
  var t0 := GetTickCount()
  var Clusters := SplitPoints(P, 2, 2)
  var t1 := GetTickCount()

  print Clusters.Len()
  print t1 - t0
end


Benchmark()
