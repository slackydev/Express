(*
 This test will not work for long, it does [-2] which is very illegal,
 even more so since we now do refcounting, and this is a array of array.
 
 It's just a misc test for me.
*)

function RefCountTest()
  var arr: array of array of Int64;
  arr.SetLen(1);
  arr[0].SetLen(3);
  arr[0][0] := 123;

  print arr[-2]; // Expected: 1 — just one reference to arr

  var alias := arr;
  print arr[-2]; // Expected: 2 — alias now also references arr

  alias := nil;
  print arr[-2]; // Expected: 1 — alias released, back to single reference

  var holder: array of array of Int64;
  holder := arr;
  
  var refcount: Int64 = arr[-2]; 
  print 'Expected: 2, Got: ' + refcount.ToStr()

  arr := nil;
  print holder[-2]; // Expected: 1 — arr released, holder still holds one reference

  holder := nil;
  // At this point, refcount would hit 0 and memory is freed.
  // Accessing [-2] now is undefined, so we don't print here.
end;

RefCountTest();

var i:=0;
repeat
  i := i + 1;
  if(i % 10 != 0) continue;
  print i
  
  if(i > 50) then
    break;
  end;
until(i = 100);