// This piece of code actually puts the language to a full test of nearly all basics
// Original work: https://villavu.com/forum/showthread.php?t=90383
(*
  Results relative to FPC:
  FPC native:	~375 ms	  1.0× (baseline)
  PyPy JIT:  	~515 ms	  1.4× slower
  Express:  	~1050 ms	2.8× slower
  JS (V8):  	~1370 ms	3.6× slower
  Lape:  	  	~4150 ms  11× slower
  CPython:  	~13700 ms	36× slower
*)

func main()
  var n: int   = 5000
  var len: int = 10 * n / 3
  var i, j, k, nines, predigit: int = 0
  var a, res: array of int = nil
  var resCount: int = 0
  
  a.SetLen(len+1)
  res.SetLen(n+1)
  
  var tm, tma:Double
  tm := GetTickCount()
  
  for(j:=0; j<=len; j:=j+1) 
    a[j] := 2  //Start with 2s
  
  for(j:=0; j<n; j:=j+1) do
    var q: int = 0
    for(i:=len; i>0; i -= 1) do         //Work backwards
      var x:int = 10*a[i-1] + q*i
      var d:int = (2 * i - 1)
      a[i-1] := x % d
      q      := x / d
    end    
    
    a[0] := q % 10
    q    := q / 10
    
    if(q = 9) then
      nines += 1
    elif(q = 10) then
      res[resCount] := predigit+1
      resCount += 1
      
      for(k:=1; k<=nines; k+=1) do
        res[resCount] := 0            //zeros
        resCount += 1
      end
      predigit := 0
      nines := 0
    else
      res[resCount] := predigit
      resCount += 1
      predigit := q
      if(nines != 0) then
        for(k:=1; k<=nines; k+=1) do
          res[resCount] := 9
          resCount += 1
        end;
        nines := 0
      end
    end
  end

  res[resCount] := predigit;
  tma := GetTickCount();
  print (tma - tm).ToStr() + 'ms';
  //for(i:=0; i<=resCount; i:=i+1)
  //  print res[i];
end;

main()
